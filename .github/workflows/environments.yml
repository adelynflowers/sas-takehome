name: EnvironmentDeploymentWorkflow

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  test-and-upload:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: authenticate with azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: add azure artifacts credentials to gradle properties
        env:
          AZURE_ARTIFACTS_USERNAME: ${{ secrets.AZURE_ARTIFACTS_USERNAME }}
          AZURE_ARTIFACTS_PASSWORD: ${{ secrets.AZURE_ARTIFACTS_PASSWORD }}
        run: |
          mkdir ~/.gradle;
          echo adelynflowersUsername=$AZURE_ARTIFACTS_USERNAME >> ~/.gradle/gradle.properties;
          echo adelynflowersPassword=$AZURE_ARTIFACTS_PASSWORD >> ~/.gradle/gradle.properties

      - name: checkout repo
        uses: actions/checkout@v4.1.1

      - name: setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Remove default github maven configuration
        # This step is a workaround to avoid a decryption issue of github's provided maven
        # settings.xml file
        run: rm ~/.m2/settings.xml

      - name: build and unit test with gradle
        run: ./gradlew build --no-daemon

      - name: run integration tests
        run: ./gradlew integrationTest --no-daemon

      - name: upload jar to azure artifacts
        run: ./gradlew publish

      - name: build docker image
        run: ./gradlew bootBuildImage

      - name: upload docker image to container registry
        run: |
            az acr login --name adelynflowers;
            docker tag $(./gradlew -q printName):$(./gradlew -q printVersion) adelynflowers.azurecr.io/$(./gradlew -q printName):$(echo $GITHUB_SHA | head -c 7);
            docker push adelynflowers.azurecr.io/$(./gradlew -q printName):$(echo $GITHUB_SHA | head -c 7);
            echo adelynflowers.azurecr.io/$(./gradlew -q printName):$(echo $GITHUB_SHA | head -c 7) > image_id.txt;
            cat image_id.txt;
            cp image_id.txt terraform/image_id.txt
            

      - name: upload image name as artifact
        uses: actions/upload-artifact@v3
        with:
          name: image_id
          path: image_id.txt

      - name: deploy instance and save ip
        run: |
          cd terraform;
          terraform init;
          echo image=\"$(cat image_id.txt)\" >> dev.tfvars
          echo resource_prefix=\"dev-$(echo $GITHUB_SHA | head -c 7)\" >> dev.tfvars
          terraform plan -var-file dev.tfvars -out "main.tfplan";
          terraform apply "main.tfplan"

      - name: pseudo e2e test
        run: |
          cd terraform;
          curl $(echo https://$(terraform output -raw latest_fqdn)/);

      - name: shutdown resources
        run: |
          cd terraform;
          terraform plan -var-file dev.tfvars -destroy -out main.destroy.tfplan;
          terraform apply "main.destroy.tfplan"

  qa:
    runs-on: ubuntu-latest
    needs: test-and-upload
    environment: qa
    steps:

      - name: authenticate with azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: checkout repo
        uses: actions/checkout@v4.1.1

      - name: download image_id artifact
        uses: actions/download-artifact@v3
        with:
          name: image_id
          path: terraform

      - name: deploy instance and save ip
        run: |
          cd terraform;
          terraform init;
          echo image=\"$(cat image_id.txt)\" >> qa.tfvars
          echo resource_prefix=\"qa-$(echo $GITHUB_SHA | head -c 7)\" >> qa.tfvars
          terraform plan -var-file qa.tfvars -out "main.tfplan";
          terraform apply "main.tfplan"

      - name: upload terraform folder as artifact
        uses: actions/upload-artifact@v3
        with:
          name: qa-terraform
          path: |
            terraform/.terraform.lock.hcl
            terraform/*.tfplan
            terraform/*.tf
            terraform/qa.tfvars
            terraform/*.tfstate
            

  # This is "QA approves, shut down QA containers and await PM approval for prod"
  pre-prod:
    runs-on: ubuntu-latest
    environment: pre-prod
    needs: qa
    steps:
      - name: authenticate with azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: download terraform folder
        uses: actions/download-artifact@v3
        with:
          name: qa-terraform
          path: ~/qa-terraform

      - name: destroy QA container
        run: |
          cd ~/qa-terraform;
          ls -R;
          terraform init;
          terraform plan -destroy -var-file qa.tfvars -out destroy.tfplan;
          terraform apply destroy.tfplan;

  prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: pre-prod
    steps:
      - name: authenticate with azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: checkout repo
        uses: actions/checkout@v4.1.1

      - name: download image_id artifact
        uses: actions/download-artifact@v3
        with:
          name: image_id
          path: ~/image_id

      - name: Deploy image
        env:
          APP_NAME: ${{ secrets.PROD_APP_NAME }}
          RESOURCE_GROUP: ${{ secrets.PROD_RESOURCE_GROUP }}
        run: |
          export IMAGE_ID=$(cat ~/image_id/image_id.txt);
          export GREEN_COMMIT=$(echo $GITHUB_SHA | head -c 7)
          cd deploy;
          chmod +x ./blue_green_deploy.sh;
          ./blue_green_deploy.sh
          



          
          
      
          

